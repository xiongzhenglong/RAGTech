# study/demo_02_exploring_parsed_pdf.py

import json
import os

def main():
    """
    Explores the structure of a parsed PDF JSON output from PDFParser.
    It demonstrates how to access various parts of the document,
    such as metadata, page content, tables, and pictures.
    """
    print("Starting exploration of parsed PDF JSON data...")

    # --- 1. Define Input JSON Path ---
    # This is the path to the JSON file generated by demo_01_pdf_parsing.py.
    # It assumes the output of the previous demo script is available.
    input_json_filename = "194000c9109c6fa628f1fed33b44ae4c2b8365f4.json"
    input_json_path = os.path.join("study", "parsed_output", input_json_filename)
    print(f"Attempting to load parsed data from: {input_json_path}")

    # --- 2. Load JSON Data ---
    if not os.path.exists(input_json_path):
        print(f"Error: Parsed JSON file not found at {input_json_path}")
        print("Please ensure you have run 'demo_01_pdf_parsing.py' successfully,")
        print("and the output file is in the 'study/parsed_output/' directory.")
        return

    try:
        with open(input_json_path, 'r', encoding='utf-8') as f:
            parsed_data = json.load(f)
        print("Successfully loaded parsed JSON data.")
    except json.JSONDecodeError:
        print(f"Error: Could not decode the JSON file at {input_json_path}.")
        print("The file might be corrupted or not a valid JSON.")
        return
    except Exception as e:
        print(f"An error occurred while loading the JSON file: {e}")
        return

    # --- 3. Explore and Print Sections ---

    # --- 3.1. Metainfo ---
    # The 'metainfo' section typically contains document-level metadata.
    # This can include the document's SHA256 hash, filename, number of pages,
    # and other general information extracted during parsing.
    print("\n--- Document Metainfo ---")
    if 'metainfo' in parsed_data and parsed_data['metainfo']:
        for key, value in parsed_data['metainfo'].items():
            print(f"  {key}: {value}")
    else:
        print("  No 'metainfo' section found or it is empty.")
    print("-------------------------")

    # --- 3.2. Content of the First Page ---
    # The 'content' key in the JSON usually holds a list of page objects.
    # Each page object contains its page number and a list of its content elements
    # (e.g., text blocks, paragraphs, headers, footers).
    # The actual text is often nested within these content elements.
    print("\n--- Content of First Page (First 500 Chars) ---")
    if 'content' in parsed_data and parsed_data['content']:
        first_page_data = parsed_data['content'][0] # Assuming 'content' is a list of pages
        page_number = first_page_data.get('page', 'N/A') # 'page' attribute stores the page number
        print(f"  Page Number: {page_number}")

        page_text_segments = []
        # The content of a page is typically a list of blocks (e.g., paragraphs, headers).
        # Each block itself might have a 'content' list containing text spans or lines.
        if 'content' in first_page_data and first_page_data['content']:
            for block in first_page_data['content']:
                # Blocks can be of various types (e.g., 'TextBlock', 'Paragraph').
                # We are interested in the textual content.
                # Some parsers might store text directly in block['text'],
                # others might have a nested 'content' list with text spans.
                if 'text' in block and block['text']:
                    page_text_segments.append(str(block['text']))
                elif 'content' in block and block['content']: # For nested content like text spans
                    for sub_element in block['content']:
                        if 'text' in sub_element and sub_element['text']:
                             page_text_segments.append(str(sub_element['text']))

        if page_text_segments:
            full_page_text = " ".join(page_text_segments)
            print(f"  Combined Text (Snippet):\n\"{full_page_text[:500]}...\"")
        else:
            print("  No textual content found or structure is different than expected for the first page.")
    else:
        print("  No 'content' section found, or it does not contain page data.")
    print("---------------------------------------------")

    # --- 3.3. Details of the First Table ---
    # The 'tables' section usually contains a list of all tables detected in the document.
    # Each table object provides its ID, page number, bounding box, number of rows/columns,
    # and often a Markdown or HTML representation of the table's content.
    print("\n--- Details of the First Table ---")
    if 'tables' in parsed_data and parsed_data['tables']:
        first_table_data = parsed_data['tables'][0]
        table_id = first_table_data.get('table_id', 'N/A')
        table_page = first_table_data.get('page', 'N/A')
        num_rows = first_table_data.get('rows', 'N/A')
        num_cols = first_table_data.get('columns', 'N/A') # Note: key might be 'cols' or 'columns'
        if 'columns' not in first_table_data and 'cols' in first_table_data:
            num_cols = first_table_data.get('cols')


        print(f"  Table ID: {table_id}")
        print(f"  Page: {table_page}")
        print(f"  Dimensions: {num_rows} rows x {num_cols} columns")

        # The 'markdown' representation is a text-based format of the table.
        markdown_repr = first_table_data.get('markdown', 'N/A')
        print(f"  Markdown Representation (Snippet):\n{markdown_repr[:300]}...")
    else:
        print("  No tables found in the document.")
    print("----------------------------------")

    # --- 3.4. Details of the First Picture ---
    # The 'pictures' section (sometimes 'figures' or 'images') contains a list of
    # image-like elements detected in the document.
    # Each picture object includes its ID, page number, and bounding box (bbox).
    # The bbox defines the picture's location and size on the page.
    print("\n--- Details of the First Picture ---")
    if 'pictures' in parsed_data and parsed_data['pictures']:
        first_picture_data = parsed_data['pictures'][0]
        picture_id = first_picture_data.get('picture_id', 'N/A') # Or 'id', 'figure_id'
        picture_page = first_picture_data.get('page', 'N/A')
        bbox = first_picture_data.get('bbox', 'N/A') # Bounding box [x_min, y_min, x_max, y_max]

        print(f"  Picture ID: {picture_id}")
        print(f"  Page: {picture_page}")
        print(f"  Bounding Box (bbox): {bbox}")
    else:
        print("  No pictures found in the document.")
    print("------------------------------------")

    print("\nExploration complete.")

if __name__ == "__main__":
    main()
